JAVASCRIPT : Callback hell is a phenomenon that happens when multiple callbacks are nested on top of each other.This is also known as pyramid of Doom. 
  for ex. 
  const cart = ["a","b","c"]
  api.createOrder(cart, function(){
    api.proceedToPayment(orderId,function(){
      api.showOrderSummary(function(){
        api.updateWallet()
      })
    })
  })

* Javascript function is a first class citizen in javascript as they can store to a variable, (pass function() as an agrument to another ) known as callback,
and can be return through any other function.

* The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
  the object contains { state : (fullfilled, pending, rejected) ,data} and there is a handler attached to promise object to 
  handle this state, for eg. 
 const cart = ["a","b","c"]
  async ( use to handle promise) createOrder (cart) {
    return orderId
  }

  const promise = createOrder()
  promise.then((value) => ProceedToPayment(value))  //run only when promise is fullfilled.
  promise.catch() to catch the rejected state of the promise
  promise.finally () it will run even when the promise is rejected or succedd

 * fetch api : to make HTTP requests to servers , returns a promise  ,supports cors error,
 let response = fetch(url); 
 The fetch() method returns a Promise so you can use the then() and catch() methods to handle it:
  fetch(url)
    .then(response => {
        // handle the response
    })
    .catch(error => {
        // handle the error
    });
 

* To create a promise 
  const cart = ["a","b","c"]
  function createOrder = new Promise (constructor : takes a callback function) ( function(resolve,reject)){
    if(!validateCart(cart)){
      const err = new Error("Cart is not valid")
      reject(err)
    }
    const orderid = 789456
    if(orderid){
      resolve(OrderId)
    }
  }

* Async await is better way to write promises  (This is the async function which returns a promise )
const asyncFunction = async () => "This is the async function which return a promise";
  const promise = asyncFunction();
  console.log(promise)

export async function getServerSideProps() {
await (wait to complete the promise , In promise we will handle all the states but in case of async and await we use try/catch)
const promise1 = fetch('https://api.com/data1').then(res => res.json());
const promise2 = fetch('https://api.com/data2').then(res => res.json());

const [data1, data2] = await Promise.all([promise1, promise2]);

return {
  props: {
    data1,
    data2  
  }
}

}

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling


async getData() {
  try {
    const categories = await getRequest(`/homepage/categorydata`);
    const locations = await getRequest(`/homepage/locationdata`);
    if (categories.status === "Success" && locations.status === 'Success') {
      return {
        props: {
          categories: categories.data,
          locations: locations.data,
          error: null,
        },
        revalidate: 10,
      };
    } else {
      throw new Error(`Something went wrong`); // When the status of the api is not success it will throw an error and the flow of the code is go to the catch block.

    }
  } catch (err) {
    console.log("Failed to fetch jobs, received status");
    return {
      props: {
        categories: [],
        locations: [],
        error: "Failed to fetch categories, received status",
      },
      revalidate: 10,
    };
  }
}

getData();

CLOSURE: It is a feature when inner function have access to the variables of the outer function (or where it is defined)
function OuterFunction(value1){
  return InnerFunction(value2){
    console.log("value1:",value1,"value2:",value2)}}

const newFunction = OuterFunction("Hello")
newFunction("World");
  
//https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Relationship_of_grid_layout_with_other_layout_methods
https://dev.to/kylejb/a-key-difference-between-then-and-async-await-in-javascript-53e9
//https://jsonplaceholder.typicode.com/

What is Event Delegation?
Event delegation is a design pattern in which a single event listener is attached to a common ancestor, 
rather than attaching listeners to multiple individual elements. This pattern takes advantage of event propagation, 
specifically the "bubbling" phase, where an event travels up the DOM hierarchy from the target element to the root.
It is based on the event bubbling.

What is CSS Model?
The CSS Model consists of four areas : Margin, border, padding, content. This layers affects the size and spacing of element on the page.
p {
    width: 80px;
    height: 70px;
    margin: 0;
    border: 2px solid black;
    padding: 5px;
}
Total Width Calculation
Total element width = width + left padding + right padding + left border + right border + left margin + right margin

Total width of the element is 94px.
Total width = 80px (width) + 10px (left padding + right padding) + 4px (left border + right border) + 0px (left margin + right margin) = 94px.
Total Height Calculation
Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin

Total height of the element is 84px.
Total height = 70px (height) + 10px (top padding + bottom padding) + 4px (top border + bottom border) + 0px (top margin + bottom margin) = 84px.

//https://devdocs.io/react/hooks-reference#usestate



